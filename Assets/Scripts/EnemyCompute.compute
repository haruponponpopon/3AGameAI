//compute shaderを用いて近傍探索計算を高速化する。
//コンピュートシェーダーの例
//https://www.wwwmaplesyrup-cs6.work/entry/MapleComputeTutorial1

#pragma kernel CSMain
static const int threadGroupSize = 1;

struct Enemy {
    float3 position;
    float3 direction;
    int type;

    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;
    int numFlockmates;
};

RWStructuredBuffer<Enemy> enemies;
int numEnemies;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize,1,1)]   //1024*1*1=1024スレッドを並列に実行
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int indexB = 0; indexB < numEnemies; indexB ++) {
        if (id.x != indexB) {
            Enemy enemyB = enemies[indexB];
            float3 offset = enemyB.position - enemies[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            //boids[indexB]が探索範囲内かつ同種族なら、群れの重心と進行方向をアップデートする。
            if (sqrDst < viewRadius * viewRadius && enemyB.type==enemies[id.x].type) {
                enemies[id.x].numFlockmates += 1;
                enemies[id.x].flockHeading += enemyB.direction;
                enemies[id.x].flockCentre += enemyB.position;

                //このif文は外に出しても
                if (sqrDst < avoidRadius * avoidRadius) {
                    enemies[id.x].separationHeading -= offset / sqrDst;
                }
            }
        }
    }
}